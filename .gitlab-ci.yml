image: rustlang/rust:nightly

variables:
    DOCKER_DRIVER: overlay2
    CROSS_BUILD_IMAGE: "${CI_REGISTRY_IMAGE}/hack/cross:latest"

stages:
    - prepare
    - build
    - test

build and push cross image:
    stage: prepare
    image: docker:latest
    services:
        - docker:dind
    script:
        - setup_docker
        - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
        - 'docker pull "${CROSS_BUILD_IMAGE}" || :'
        - docker build --pull --cache-from "${CROSS_BUILD_IMAGE}" -t "${CROSS_BUILD_IMAGE}" hack/docker/cross/
        - docker push "${CROSS_BUILD_IMAGE}"

rustfmt:
    stage: build
    except:
        - master
        - develop
    script:
        - rustup component add rustfmt-preview
        - cargo fmt -- --write-mode=diff

build dynamic binary on stable:
    stage: build
    image: rust:latest
    script:
        - cargo build --verbose
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock

build dynamic binary on nightly:
    stage: build
    image: rustlang/rust:nightly
    script:
        - cargo build --verbose
    allow_failure: true
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock

build static binary:
    stage: build
    image: "${CROSS_BUILD_IMAGE}"
    script:
        - cargo build --target x86_64-unknown-linux-musl --release
        - cp target/x86_64-unknown-linux-musl/release/i3nator i3nator
    artifacts:
        name: "$CI_JOB_NAME"
        paths:
            - Cargo.toml
            - Cargo.lock
            - i3nator

test dynamic binary on stable:
    stage: test
    image: rust:latest
    dependencies: [] # do not retrieve artefacts from previous stages
    script:
        - cargo test -- --nocapture
        - cargo test -j1 --features sequential-tests -- --test-threads 1 --nocapture

test dynamic binary on nightly:
    stage: test
    image: rustlang/rust:nightly
    dependencies: [] # do not retrieve artefacts from previous stages
    script:
        - cargo test -- --nocapture
        - cargo test -j1 --features sequential-tests -- --test-threads 1 --nocapture
    allow_failure: true

test static binary:
    stage: test
    image: "${CROSS_BUILD_IMAGE}"
    dependencies: [] # do not retrieve artefacts from previous stages
    script:
        - cargo test --target x86_64-unknown-linux-musl -- --nocapture
        - cargo test --target x86_64-unknown-linux-musl -j1 --features sequential-tests -- --test-threads 1 --nocapture

# -----------------------------------------------------------------------------

.global_functions: &global_functions |
    function setup_docker() {
        if ! docker info &>/dev/null; then
            if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
                export DOCKER_HOST='tcp://localhost:2375'
            fi
        fi
    }

before_script:
    - *global_functions
